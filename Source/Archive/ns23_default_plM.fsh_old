//Required Extensions
//extension GL_ARB_texture_rectangle : require


//Uniform Textures
uniform sampler2DRect				knotPointsU;
#define kpU(index)					(texture2DRect(knotPointsU, vec2(index)).r)
uniform sampler2DRect				knotPointsV;
#define kpV(index)					(texture2DRect(knotPointsV, vec2(index)).r)
uniform sampler2DRect				controlPoints;
#define cp(i,j)						(texture2DRect(controlPoints, vec2(i,j)))
uniform sampler2DRect				verts;


//Uniform Inputs
uniform ivec4						numParamsU;			// { degree, cp, kp, foo }
uniform ivec4						numParamsV;			// { degree, cp, kp, foo }
vec4 bvU, bvV, bvUU, bvVV;


/*************************************************************************/


int FindSpanU(float u) {
	int retVal;
	//Check the special case
	if (u >= kpU(numParamsU.y)) retVal = numParamsU.y-1;
	else {
		//Set up search
		ivec3 lmh = ivec3(numParamsU.x, 0, numParamsU.y);
		lmh.y = (lmh.x + lmh.z) / 2;
		//Start binary search
		int i=0;
		while ((u < kpU(lmh.y)) || (u >= kpU(lmh.y+1))) {  
			if (u < kpU(lmh.y)) lmh.z = lmh.y;
			else lmh.x = lmh.y;
			lmh.y = (lmh.x + lmh.z) / 2;
			if (i > 4) return -1;
			i++;
		}
		//Return the span value
		retVal = lmh.y;
	}
	return retVal;
}


int FindSpanV(float v) {
	int retVal;
	//Check the special case
	if (v >= kpV(numParamsV.y)) retVal = numParamsV.y-1;
	else {
		//Set up search
		ivec3 lmh = ivec3(numParamsV.x, 0, numParamsV.y);
		lmh.y = (lmh.x + lmh.z) / 2;
		//Start binary search
		int i=0;
		while ((v < kpV(lmh.y)) || (v >= kpV(lmh.y+1))) {  
			if (v < kpV(lmh.y)) lmh.z = lmh.y;
			else lmh.x = lmh.y;
			lmh.y = (lmh.x + lmh.z) / 2;
			if (i > 4) return -1;
			i++;
		}
		//Return the span value
		retVal = lmh.y;
	}
	return retVal;
}


/*************************************************************************/


void BasisValuesU(float u, int span) {
	ivec3 jr;
	vec2 savedTemp;
	vec4 left;
	vec4 right;

	//Basis[0] is always 1.0
	bvU[0] = 1.0;
	//Calculate basis values
	for (jr.x=1; jr.x<=numParamsU.x; jr.x++) {
		left[jr.x] = u - kpU(span+1-jr.x);
		right[jr.x] = kpU(span+jr.x) - u;
		savedTemp.x = 0.0;
		for (jr.y=0; jr.y<jr.x; jr.y++) {
			savedTemp.y = bvU[jr.y] / (right[jr.y+1] + left[jr.x-jr.y]);
			bvU[jr.y] = savedTemp.x + right[jr.y+1] * savedTemp.y;
			savedTemp.x = left[jr.x-jr.y] * savedTemp.y;
		}
		bvU[jr.x] = savedTemp.x;
		
		//Calculate N' if on second to last iteration
		if (jr.x == numParamsU.x-1) {
			savedTemp.x = 0.0;
			//Loop through all basis values
			for (jr.y=0; jr.y<numParamsU.x; jr.y++) {
				//Calculate a temp variable
				jr.z = span - numParamsU.x + jr.y + 1;
				//Calculate right side
				savedTemp.y = (float(numParamsU.x) * bvU[jr.y]) / (kpU(jr.z + numParamsU.x) - kpU(jr.z));
				//Calculate derivative value
				bvUU[numParamsU.x + jr.y + 1] =  savedTemp.x - savedTemp.y;
				//Swap right side to left
				savedTemp.x = savedTemp.y;	
			}
			//Save the last der-basis
			bvUU[numParamsU.x * 2 + 1] = savedTemp.x;
		}
	}
}


/*************************************************************************/


void BasisValuesV(float v, int span) {
	ivec3 jr;
	vec2 savedTemp;
	vec4 left;
	vec4 right;

	//Basis[0] is always 1.0
	bvV[0] = 1.0;
	//Calculate basis values
	for (jr.x=1; jr.x<=numParamsV.x; jr.x++) {
		left[jr.x] = v - kpV(span+1-jr.x);
		right[jr.x] = kpV(span+jr.x) - v;
		savedTemp.x = 0.0;
		for (jr.y=0; jr.y<jr.x; jr.y++) {
			savedTemp.y = bvV[jr.y] / (right[jr.y+1] + left[jr.x-jr.y]);
			bvV[jr.y] = savedTemp.x + right[jr.y+1] * savedTemp.y;
			savedTemp.x = left[jr.x-jr.y] * savedTemp.y;
		}
		bvV[jr.x] = savedTemp.x;

		//Calculate N' if on second to last iteration
		if (jr.x == numParamsV.x-1) {
			savedTemp.x = 0.0;
			//Loop through all basis values
			for (jr.y=0; jr.y<numParamsV.x; jr.y++) {
				//Calculate a temp variable
				jr.z = span - numParamsV.x + jr.y + 1;
				//Calculate right side
				savedTemp.y = (float(numParamsV.x) * bvV[jr.y]) / (kpV(jr.z + numParamsV.x) - kpV(jr.z));
				//Calculate derivative value
				bvVV[numParamsV.x + jr.y + 1] =  savedTemp.x - savedTemp.y;
				//Swap right side to left
				savedTemp.x = savedTemp.y;	
			}
			//Save the last der-basis
			bvVV[numParamsU.x * 2 + 1] = savedTemp.x;
		}
	}
}


/*************************************************************************/


void main(void) 
{
	int i, j, index;
	ivec2 span;
	vec2 inPos = floor(gl_FragCoord.xy);
	vec3 pos, derX, derY;

	//Get basic vertex info
	vec4 inVert = texture2DRect(verts, inPos);
	//Find the span for the vertex
	span.x = FindSpanU(inVert.x);
	BasisValuesU(inVert.x, span.x);
	span.y = FindSpanV(inVert.y);
	BasisValuesV(inVert.y, span.y);		
	//Make sure to zero the results
	pos = vec3(0.0);
	derX = vec3(0.0);
	derY = vec3(0.0);
	//Loop through each basis value
	for (i=0; i<=numParamsV.x; i++) {
		for (j=0; j<=numParamsU.x; j++) {
			pos = pos + (cp(span.x - numParamsU.x + j,span.y - numParamsV.x + i).xyz *  bvU[j] * bvV[i]);
//			derX = derX + (controlPoints[index].xyz * basisValuesU[numParamsU.x+1+i] * basisValuesV[j]);
//			derY = derY + (controlPoints[index].xyz * basisValuesU[i] * basisValuesV[numParamsV.x+1+j]);
		}
	}
	
	//Set the position (don't forget the w divide) and emit
	gl_FragData[0] = vec4(pos, 1.0);
//	gl_FragData[0] = vec4(inPos, 0, 1);
//	gl_FragData[0] = vec4(0.1, 0.2, 0.3, 0.4);
//	gl_FragData[0] = vec4(inVert.x, inVert.y, span.x, span.y);
//	gl_FragData[0] = vec4(kpV(0), kpV(1), kpV(2), kpV(3));
//	gl_FragData[0] = cp(3,3);	
//	gl_FragData[0] = vec4(bvV[0], bvV[1], bvV[2], bvV[3]);
//	gl_FragData[0] = vec4(bvU[0], bvU[1], bvU[2], bvU[3]);	
	//Calculate the normal
//	nurbNormal = normalize(cross(derY, derX));
//	gl_FragData[1] = vec4(1.0, 2.0, 3.5, 4.0);
//	gl_FragData[1] = normalize(cross(derY, derX));
}

/*************************************************************************/

